.TH SCISHELL v.1 "28 October 2021" "0.1" "SCISHELL man page"
.SH NAME
.B SCISHELL, hsh - a simple command interpreter
.SH SYNOPSIS
.IP
.I ./hsh [command] [arg]

.I LIBRARIES
\fb #include <stdlib.h>
\fb #include <unistd.h>
\fb #include <sys/types.h>
\fb #include <sys/wait.h>
\fb #include <sys/stat.h>
\fb #include <readline/readline.h>
\fb #include <readline/history.h>
\fb #include <limits.h>

.I MACROS

\fb #define TOK_DELIM " \t\r\n"
\fb #define RED "\033[0;31m"
\fb #define RESET "\e[0m"
\fb #define MAXCOM 1000 /* max number of letters to be supported */
\fb #define MAXLIST 100 /* max number of commands to be supported */
\fb #define TK_BUFF_SIZE 1024
\fb /* Clearing the shell using escape sequences */
\fb #define clear() printf("\033[H\033[J")

.I PROTOTYPES

\fb char *read_line();
\fb char **split_line(char *);
\fb int dash_exit(char **command, int status);
\fb int dash_execute(char **args);
\fb void printDir(void);
\fb void init_shell(void);
\fb int takeInput(char *str);
\fb char *_strcpy(char *dest, char *src);
\fb char *_strcat(char *dest, char *src);
\fb char *_strdup(char *str);
\fb char *_strchr(char *s, char c);
\fb int _strcmp(char *s1, char *s2);
\fb int _strlen(char *s);
\fb int _strncmp(char *s1, char *s2, int n);
\fb void _puts(char *str);
\fb int _putchar(char c);
\fb int _path(char **args, char **env);
\fb char *getEnv(char *var, char **env);
\fb void printEnv(char **env);
\fb int _atoi(char *s);



.SH DESCRIPTION
CISHELL is a simple command interpreter like a (sh) and executes commands read from the standard input or from a file.\


.SH OVERVIEW
CISHELL is a simple shell that reads lines from terminal prompt or file, interprets them, and executes the commands if are corrects.\
CISHELL starts when run the executable file, ./hsh. CISHELL implements a language that has flow control constructs, steering the computer to execute the commands.
 It incorporates, features for interactive use and has the advantage of being in non-interactive mode, allowing the user to pipe commands into hsh such as echo "l
s" | ./hsh, That is, commands can be typed directly to the running shell or can be put into a file and the file can be executed directly by the shell.

.SH EXECUTION
To run CISHELL, you must first compile with " gcc -Wall -Werror -Wextra -pedantic *.c -o hsh " and run the executable ./hsh.
If there are no arguments present and if the standard input of the shell is connected to a terminal, the shell is in interactive mode .
CISHELL is designed to work in Linux or a Unix like system and give access to the shell to use the Linux system calls to retrieve and execute executable programs
found in the $PATH. CISHELL incorporates the builtin commands "exit" and "env" and "cd".


.SH BUILTIN COMMANDS
Here there is an information about the builtin commands into CISHELL

.I env

display the environment to standard output

.I exit

finish CISHELL's processes

.I cd

change working directory


.SH EXAMPLE OF EXTERNAL COMMANDS

Here is an example use of the "ls" command in SCISHELL:


.I SIMPLE FORM - ONLY COMMAND

.B >>> ls
\fb a.out           exercises           my_shell.c  _puts.c       _strcmp.c
\fb _atoi.c         getEnv.c            _path.c     read_line.c   str_funcs.c
\fb AUTHORS         init_shell.c        printDir.c  README.md     takeInput.c
\fb dash_execute.c  man_1_simple_shell  printEnv.c  shell.h
\fb dash_exit.c     more_str_funcs.c    _putchar.c  split_line.c

.I LONG FORM - COMMAND WITH ARGUMENTS

.B >>> ls -l
\fb total 104
\fb -rwxr-xr-x 1 root root 22896 Nov  3 01:28 a.out
\fb -rw-r--r-- 1 root root   784 Nov  2 04:24 _atoi.c
\fb -rw-r--r-- 1 root root   153 Nov  1 01:28 AUTHORS
\fb -rw-r--r-- 1 root root   603 Nov  3 01:24 dash_execute.c
\fb -rw-r--r-- 1 root root   820 Nov  2 08:50 dash_exit.c
\fb drwxr-xr-x 2 root root   273 Oct 26 05:42 exercises
\fb -rw-r--r-- 1 root root   539 Nov  2 14:11 getEnv.c
\fb -rw-r--r-- 1 root root   499 Nov  2 09:28 init_shell.c
\fb -rw-r--r-- 1 root root     0 Nov  1 03:15 man_1_simple_shell
\fb -rw-r--r-- 1 root root   532 Nov  2 11:32 more_str_funcs.c
\fb -rw-r--r-- 1 root root   454 Nov  2 14:18 my_shell.c
\fb -rw-r--r-- 1 root root   908 Nov  2 14:11 _path.c
\fb -rw-r--r-- 1 root root   188 Nov  2 09:49 printDir.c
\fb -rw-r--r-- 1 root root   286 Nov  2 14:09 printEnv.c
\fb -rw-r--r-- 1 root root   246 Nov  2 11:21 _putchar.c
\fb -rw-r--r-- 1 root root   289 Nov  2 14:01 _puts.c
\fb -rw-r--r-- 1 root root   693 Nov  2 10:06 read_line.c
\fb -rw-r--r-- 1 root root  2312 Oct 26 01:04 README.md
\fb -rw-r--r-- 1 root root  1221 Nov  3 01:56 shell.h
\fb -rw-r--r-- 1 root root   825 Nov  2 10:22 split_line.c
\fb -rw-r--r-- 1 root root   425 Nov  2 04:25 _strcmp.c
\fb -rw-r--r-- 1 root root  1636 Nov  2 11:34 str_funcs.c
\fb -rw-r--r-- 1 root root   282 Nov  2 10:47 takeInput.c


.SH EXAMPLE OF BUILTIN
\fb Here is an example of the builtin function, "env":

.I ENVIRONMENT VARIABLE (env)

.B >>> env
\fb env
\fb HOSTNAME=cd8292a73c80
\fb LANGUAGE=en_US:en
\fb PWD=/root/alx-low_level_programming/simple_shell
\fb TZ=America/Los_Angeles
\fb HOME=/root
\fb LANG=en_US.UTF-8
\fb LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:t
\fb w=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzm
\fb a=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*
\fb .xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=
\fb 01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31
\fb :*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35
\fb :*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*
\fb .mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.
\fb qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;
\fb 35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*
\fb .mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xs
\fb pf=00;36:
\fb LESSCLOSE=/usr/bin/lesspipe %s %s
\fb TERM=xterm
\fb LESSOPEN=| /usr/bin/lesspipe %s
\fb SHLVL=1
\fb LC_ALL=en_US.UTF-8
\fb PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
\fb _=./a.out

.SH BUGS
No known bugs.


.SH AUTHORS

Abdurahman Mammu Haji <abdimahmudhaji227@gmail.com>

 Ismail Olagunju <olagunjuismail7@gmail.com>

