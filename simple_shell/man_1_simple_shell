.TH SCISHELL v.1 "28 October 2021" "0.1" "SCISHELL man page"
.SH NAME
.B SCISHELL, hsh - a simple command interpreter
.SH SYNOPSIS
.IP
.I ./hsh [command] [arg]

.I LIBRARIES
\fb #include <stdio.h>
\fb #include <string.h>
\fb #include <unistd.h>
\fb #include <stdlib.h>
\fb #include <sys/types.h>
\fb #include <sys/wait.h>
\fb #include <errno.h>
\fb #include <sys/stat.h>
\fb #include <limits.h>

.I MACROS
\fb #define CHANGE_DIR 1
\fb #define EXIT_SHELL 2
\fb #define PERM_DENIED "Permission denied"
\fb #define NOT_FOUND "not found"
.I PROTOTYPES

\fb int _atoi(char *s);
\fb void rmspaces(char *str);
\fb void reverse(char *str, int len);
\fb int intToStr(int x, char str[]);
\fb void _puts(char *str);
\fb void errors(char *program, char *param, char *message, int Qexe);
\fb void Dash_execute(char **env, char **argv);
\fb char **Parscmd(char *command, char *separator);
\fb void _prompt(void);
\fb int cmdexec(char **param, char **env);
\fb void printEnv(char **env);
\fb int Builtin(char *command, char **env, int status);
\fb char *GetEnv(char *var, char **env);
\fb int mpth(char **param, char **env);
\fb void execute(char *command, char **env);
\fb char *_strcpy(char *dest, char *src);
\fb char *_strcat(char *dest, char *src);
\fb char *_strdup(char *str);
\fb char *_strchr(char *s, char c);
\fb int _strcmp(char *s1, char *s2);
\fb int _Wait(char **argv, char *command, int QExecutes);
\fb int Dash_exit(char *command, int status);
\fb int _strlen(char *s);
\fb int _strncmp(char *s1, char *s2, int n);
\fb int _putchar(char c);
\fb void init_shell(void);



.SH DESCRIPTION
CISHELL is a simple command interpreter like a (sh) and executes commands read from the standard input or from a file.\


.SH OVERVIEW
CISHELL is a simple shell that reads lines from terminal prompt or file, interprets them, and executes the commands if are corrects.\
CISHELL starts when run the executable file, ./hsh. CISHELL implements a language that has flow control constructs, steering the computer to execute the commands.
 It incorporates, features for interactive use and has the advantage of being in non-interactive mode, allowing the user to pipe commands into hsh such as echo "l
s" | ./hsh, That is, commands can be typed directly to the running shell or can be put into a file and the file can be executed directly by the shell.

.SH EXECUTION
To run CISHELL, you must first compile with " gcc -Wall -Werror -Wextra -pedantic *.c -o hsh " and run the executable ./hsh.
If there are no arguments present and if the standard input of the shell is connected to a terminal, the shell is in interactive mode .
CISHELL is designed to work in Linux or a Unix like system and give access to the shell to use the Linux system calls to retrieve and execute executable programs
found in the $PATH. CISHELL incorporates the builtin commands "exit" and "env" and "cd".


.SH BUILTIN COMMANDS
Here there is an information about the builtin commands into CISHELL

.I env

display the environment to standard output

.I exit

finish CISHELL's processes

.I cd

change working directory


.SH EXAMPLE OF EXTERNAL COMMANDS

Here is an example use of the "ls" command in SCISHELL:


.I SIMPLE FORM - ONLY COMMAND

.B $>>> ls
\fb _atoi.c         Dash_exit.c   man_1_simple_shell  _prompt.c   str_funcs.c
\fb AUTHORS         errors.c      more_str_funcs.c    README.md
\fb Builtin.c       GetEnv.c      mpth.c              rmspaces.c
\fb cmdexec.c       hsh           Parscmd.c           shell.c
\fb Dash_execute.c  init_shell.c  printEnv.c          shell.h


.I LONG FORM - COMMAND WITH ARGUMENTS

.B $>>> ls -l
\fb total 104
\fb -rw-r--r-- 1 root root  1798 Nov  3 13:01 _atoi.c
\fb -rw-r--r-- 1 root root   179 Nov  3 13:01 AUTHORS
\fb -rw-r--r-- 1 root root  1139 Nov  3 13:01 Builtin.c
\fb -rw-r--r-- 1 root root   548 Nov  3 13:01 cmdexec.c
\fb -rw-r--r-- 1 root root  2467 Nov  3 13:01 Dash_execute.c
\fb -rw-r--r-- 1 root root   739 Nov  3 13:01 Dash_exit.c
\fb -rw-r--r-- 1 root root   581 Nov  3 13:01 errors.c
\fb -rw-r--r-- 1 root root   478 Nov  3 13:01 GetEnv.c
\fb -rwxr-xr-x 1 root root 23232 Nov  3 13:01 hsh
\fb -rw-r--r-- 1 root root   524 Nov  3 13:01 init_shell.c
\fb -rw-r--r-- 1 root root  2177 Nov  3 13:01 man_1_simple_shell
\fb -rw-r--r-- 1 root root  1637 Nov  3 13:01 more_str_funcs.c
\fb -rw-r--r-- 1 root root   847 Nov  3 13:01 mpth.c
\fb -rw-r--r-- 1 root root   929 Nov  3 13:01 Parscmd.c
\fb -rw-r--r-- 1 root root   223 Nov  3 13:01 printEnv.c
\fb -rw-r--r-- 1 root root   234 Nov  3 13:01 _prompt.c
\fb -rw-r--r-- 1 root root  2312 Nov  3 13:01 README.md
\fb -rw-r--r-- 1 root root   404 Nov  3 13:01 rmspaces.c
\fb -rw-r--r-- 1 root root   351 Nov  3 13:01 shell.c
\fb -rw-r--r-- 1 root root  1307 Nov  3 13:01 shell.h
\fb -rw-r--r-- 1 root root  1448 Nov  3 13:01 str_funcs.c



.SH EXAMPLE OF BUILTIN
\fb Here is an example of the builtin function, "env":

.I ENVIRONMENT VARIABLE (env)

.B $>>> env
\fb HOSTNAME=cd8292a73c80
\fb LANGUAGE=en_US:en
\fb PWD=/root/alx-low_level_programming/simple_shell
\fb TZ=America/Los_Angeles
\fb HOME=/root
\fb LANG=en_US.UTF-8
\fbLS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
\fb LESSCLOSE=/usr/bin/lesspipe %s %s
\fb TERM=xterm
\fb LESSOPEN=| /usr/bin/lesspipe %s
\fb SHLVL=1
\fb LC_ALL=en_US.UTF-8
\fb PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
\fb _=./hsh
\fb OLDPWD=/root/alx-low_level_programming

.SH BUGS
No known bugs.


.SH AUTHORS

Abdurahman Mammu Haji <abdimahmudhaji227@gmail.com>

Ismail Olagunju <olagunjuismail7@gmail.com>

